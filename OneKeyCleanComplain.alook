{
  "author" : "June",
  "info" : "自动净化反黑",
  "match" : 1,
  "code" : "LyoKICogQG5hbWU6IOS4gOmUruWHgOWMluWPjem7kQogKiBAQXV0aG9yOiBKdW5lCiAqIEB2ZXJzaW9uOiAxLjAKICogQGRlc2NyaXB0aW9uOiDkuIDplK7lrozmiJDmlrDmtarlvq7ljZrlh4DljJbjgIHkuL7miqUKICogQGluY2x1ZGU6ICoKICogQGNyZWF0ZVRpbWU6IDIwMjAtMDEtMjYgCiAqIEB1cGRhdGVUaW1lOiAyMDIwLTAxLTI3IAogKi8KKGZ1bmN0aW9uICgpIHsKICAvKiDliKTmlq3mmK\/lkKbor6XmiafooYwgKi8KICBjb25zdCB3aGl0ZUxpc3QgPSBbJ20ud2VpYm8uY24nLCdzZXJ2aWNlLmFjY291bnQud2VpYm8uY29tJywnd3d3LmJhaWR1LmNvbSddOwogIGNvbnN0IGhvc3RuYW1lID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lOwogIGNvbnN0IGtleSA9IGVuY29kZVVSSUNvbXBvbmVudCgnSnVuZTrkuIDplK7lh4DljJblj43pu5E65omn6KGM5Yik5patJyk7CgogIGlmKHdoaXRlTGlzdC5pbmRleE9mKGhvc3RuYW1lKSA8IDApewogICAgcmV0dXJuOwogIH0KCiAgaWYgKHdpbmRvd1trZXldKSB7CiAgICByZXR1cm47CiAgfTsKCiAgd2luZG93W2tleV0gPSB0cnVlOwoKICAvKiDku6PnoIHmraPmlocgKi8KICBjYWxsYmFjayA9IGZ1bmN0aW9uKCl7CiAgICBjb25zb2xlLmxvZygiY2FsbGJhY2s6ICIgKyBkb2N1bWVudC5yZWFkeVN0YXRlKTsKICAgIG1haW4oKTsKICB9OwogIGlmKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIpewogICAgbWFpbigpOwogIH0KICBlbHNlewogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGNhbGxiYWNrLGZhbHNlKTsKICB9CgogIC8vPT09PWZvciBhdXRvIGNsZWFuPT09CiAgLy8gaW5pdGlhbGl6ZQogIHZhciBlZmZlY3RpdmVfbGlua3NfbnVtID0gMDsKICB2YXIgcmVhbF9saW5rc19udW0gPSAwOwogIHZhciBwcm9jZXNzX3RpbWUgPSAxOyAvL+W+queOr+asoeaVsAogIHZhciBsaW5rX2Fycnk9bmV3IEFycmF5KCk7IC8vYXJyeSB0byBzdG9yZSBsaW5rcwoKICB2YXIgZGVsYXlPbmUgPSAyMDAwMDsgLy8gZGVsYXkgZHVyYXRpb24gZm9yIG9wZW5pbmcgb25lIHRhYiAobG9uZ2VyIGlmIGxvYWRpbmcgbW9yZSB0aGFuIG9uZSB0YWIpCgogIHZhciB0MSA9IDA7CiAgdmFyIHQyID0gMDsKCiAgdmFyIGlzX211bHRpID0gZmFsc2U7CiAgdmFyIG11bHRpX3RhYl9udW0gPSA1OwoKICB2YXIgcHJvY2Vzc19pID0gMDsKCiAgLy89PT09Zm9yIGNvbXBsYWluPT09CiAgLy8gaW5pdGlhbGl6ZSByZXBvcnQgcGFyYW1ldGVycwogIHZhciBzdWNjZXNzX251bSA9IDA7CiAgdmFyIHR5cGVOdW0gPSAxMTsKCiAgLy9zaXplIGZvciBlYWNoIHR5cGUKICB2YXIgY2xhc3NfYXJyYXkgPSBuZXcgQXJyYXkoKTsKICBmb3IodmFyIHRpID0gMDsgdGkgPCB0eXBlTnVtOyB0aSsrKXsKICAgICAgY2xhc3NfYXJyYXlbdGldID0gMDsKICB9CgogIHZhciB0eXBlS2V5V29yZF9hcnJheSA9IG5ldyBBcnJheSgpOwogIHR5cGVLZXlXb3JkX2FycmF5WzBdPSLov53ms5Ut6L+d56aBIjsKICB0eXBlS2V5V29yZF9hcnJheVsxXT0i5Z6D5Zy+LeWFtuS7liI7CiAgdHlwZUtleVdvcmRfYXJyYXlbMl09IuWeg+Wcvi3mmLXnp7AiOwogIHR5cGVLZXlXb3JkX2FycmF5WzNdPSLmnInlrrMt5YW25LuW5pyJ5a6z5L+h5oGvIjsKICB0eXBlS2V5V29yZF9hcnJheVs0XT0i5raJ6buELeS9juS\/lyI7CiAgdHlwZUtleVdvcmRfYXJyYXlbNV09Iui\/neazlS3mr5Llk4EiOwogIHR5cGVLZXlXb3JkX2FycmF5WzZdPSLor4jpqpct5LiN5Zyo5Lul5LiKIjsKICB0eXBlS2V5V29yZF9hcnJheVs3XT0i5LiN5a6eLeS4jeWcqOS7peS4iiI7CiAgdHlwZUtleVdvcmRfYXJyYXlbOF09IuacieWusy3mmrTmgZAiOwogIHR5cGVLZXlXb3JkX2FycmF5WzldPSLlnoPlnL4t5aS05YOPIjsKICB0eXBlS2V5V29yZF9hcnJheVsxMF09Iua2iem7hC3lpLTlg4\/mmLXnp7Dov53op4QiOwoKCiAgdmFyIGFsbCA9IG5ldyBBcnJheSgpOwogIGZvcih2YXIgdGkwID0gMDsgdGkwIDwgdHlwZU51bTsgdGkwKyspewogICAgICBhbGxbdGkwXSA9IG5ldyBBcnJheSgpOwogIH0KCgogIC8vdG8gc3RvcmUgc3ViIGluZm8KICB2YXIgYWxsX2luZm8gPSBuZXcgQXJyYXkoKTsKICBmb3IodmFyIHRpaSA9IDA7IHRpaSA8IHR5cGVOdW07IHRpaSsrKXsKICAgICAgYWxsX2luZm9bdGlpXSA9IG5ldyBBcnJheSgpOwogIH0KCgogIHZhciBpbGxlZ2FsT19hcnJheSA9IG5ldyBBcnJheSgpOwogIHZhciBsaXR0ZXJPX2FycmF5ID0gbmV3IEFycmF5KCk7CiAgdmFyIGxpdHRlck5fYXJyYXkgPSBuZXcgQXJyYXkoKTsKICB2YXIgYmFkT19hcnJheSA9IG5ldyBBcnJheSgpOwogIHZhciBzZXhMX2FycmF5ID0gbmV3IEFycmF5KCk7CiAgdmFyIGlsbGVnYWxEX2FycmF5ID0gbmV3IEFycmF5KCk7CiAgdmFyIGxpYXJPX2FycmF5ID0gbmV3IEFycmF5KCk7CgogIHZhciBpbGxlZ2FsT3RoZXJfbiA9IDA7CiAgdmFyIGxpdHRlck90aGVyX24gPSAwOwogIHZhciBsaXR0ZXJOYW1lX24gPSAwCiAgdmFyIGJhZE90aGVyX24gPSAwCiAgdmFyIHNleExvd19uID0gMDsKICB2YXIgaWxsZWdhbERyYWdfbiA9IDA7CiAgdmFyIGxpYXJPdGhlcl9uID0gMDsKICB2YXIgbm9yZWFsT3RoZXJfbiA9IDA7CiAgLy92YXIgY2xhc3NfYXJyYXlbN10gPSAwOwoKICB2YXIgY2xhc3NEdXIgPSAyMDAwMDsKCiAgLy9mb3IgcmVwb3J0IHBhZ2UKICB2YXIgYzEgPSAiIjsKICB2YXIgYzIgPSAiIjsKCiAgdmFyIGNsYXNzMSA9ICIiCiAgdmFyIGNsYXNzMiA9ICIiCgogIGZ1bmN0aW9uIG1haW4oKXsKICAgIGNvbnNvbGUubG9nKCItLS0gQXV0b0NsZWFuQ29tcGxhaW46ICIrZG9jdW1lbnQucmVhZHlTdGF0ZSk7CgogICAgLy9mb3IgbWFpbiBwYWdlCiAgICBpZihkb2N1bWVudC5sb2NhdGlvbi5ocmVmLmluZGV4T2YoImh0dHBzOi8vbS53ZWliby5jbiIpICE9IC0xKXsKICAgICAgICAvL2NvbnNvbGUubG9nKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIndlaWJvLXRleHQiKVswXSk7CiAgICAgICAgaWYoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgid2VpYm8tdGV4dCIpWzBdID09PSB1bmRlZmluZWQpey8v5pyq5Yqg6L295a6MLCDnvJPlhrIycwogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBtYWluKCk7CiAgICAgICAgICAgIH0sMjAwMCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vY2hlY2sgaWYgcmVwb3J0CiAgICAgICAgZWxzZSBpZihkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ3ZWliby10ZXh0IilbMF0uaW5uZXJUZXh0LmluZGV4T2YoIuS4vuaKpSIpICE9IC0xKXsKICAgICAgICAgICAgY29uc29sZS5sb2coIuS4vuaKpSIpOwogICAgICAgICAgICBhZGRCdXR0b24oKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvL2NoZWNrIGlmIGNsZWFuCiAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgid2VpYm8tdGV4dCIpWzBdLmlubmVyVGV4dC5pbmRleE9mKCLlh4DljJYiKSAhPSAtMSl7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLlh4DljJYiKTsKICAgICAgICAgICAgdmFyIGJ1dHRvbmZsYWcgPSBhZGRDbGVhbkJ1dHRvbigpOwogICAgICAgICAgICBpZihidXR0b25mbGFnICE9PSAwKXsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImJ1dHRvbiBhZGRlZCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vcmV0dXJuOwogICAgICAgIH0KICAgICAgICBlbHNlewogICAgICAgICAgICBjb25zb2xlLmxvZygi5o6n6K+EIik7CiAgICAgICAgICAgIC8vYWxlcnQoIuaOp+ivhCIpOwogICAgICAgICAgICAvL2FkZFRodW1iQnV0dG9uKCk7ICAgICAgICAgICAgICAgICAKICAgICAgICB9CiAgICB9CiAgICAvL2ZvciByZXBvcnQgcGFnZQogICAgZWxzZSBpZihkb2N1bWVudC5sb2NhdGlvbi5ocmVmLmluZGV4T2YoImh0dHBzOi8vc2VydmljZS5hY2NvdW50LndlaWJvLmNvbS9yZXBvcnRzcGFtb2JpbGUiKSAhPSAtMSl7CiAgICAgICAgLy9hbGVydCgicmVwb3J0Iik7CiAgICAgICAgcGFnZVByb2Nlc3MoKTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICAvL2ZvciBiYWlkdSBwYWdlCiAgICAvL2h0dHBzOi8vd3d3LmJhaWR1LmNvbS9zP2llPXV0Zi04JmY9OCZyc3ZfYnA9MSZyc3ZfaWR4PTEmdG49YmFpZHUmd2Q9JUU3JThFJThCJUU2JUJBJTkwJgogICAgZWxzZSBpZihkb2N1bWVudC5sb2NhdGlvbi5ocmVmLmluZGV4T2YoImh0dHBzOi8vd3d3LmJhaWR1LmNvbS9zIikgIT09IC0xICYmIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigid2Q9JUU3JThFJThCJUU2JUJBJTkwIikhPT0tMSl7CiAgICAgICAgLy9hbGVydCgiYmFpZHUiKQogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgYmFpZHVQYWdlKCk7CiAgICAgICAgfSw0MDAwKTsKICAgICAgICAKICAgIH0KICAgIGVsc2V7Ly9zaG91bGQgbm90IGhlcmUKICAgICAgICBhbGVydCgidW5rbm93biByZWFzb24iKTsKICAgIH0KfQoKLy89PT09PT09PT09PT09PT09PSBjb21wbGFpbiA9PT09PT09PT09PT09PT0KCi8vc3RhcnQgZnVuY3Rpb24gZm9yIHdlaWJvIGNvbXBsYWluCmZ1bmN0aW9uIHN0YXJ0V2VpYm8oKXsKICAgIC8vY2hlY2sgaWYgZnJvbSBAQ2FyZVJveV\/njovmupDlj43pu5Hnu4QKICAgIC8vQOacnemYs+WMuueDreW\/g+awkeS8lwogICAgdmFyIGF1dGhvciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIndlaWJvLXRvcCBtLWJveCIpWzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIm0tdGV4dC1ib3giKVswXS5jaGlsZHJlblswXS5pbm5lclRleHQ7CiAgICBpZiAoYXV0aG9yLmluZGV4T2YoIkNhcmVSb3lf546L5rqQ5Y+N6buR57uEIikgPT0gLTEgJiYgYXV0aG9yLmluZGV4T2YoIuacnemYs+WMuueDreW\/g+awkeS8lyIpID09IC0xKXsKICAgICAgICBhbGVydCgiRXJyb3I6IOmdnkBDYXJlUm95X+eOi+a6kOWPjem7kee7hCBA5pyd6Ziz5Yy654Ot5b+D5rCR5LyXIOaJgOWPke+8jOS4jeaUr+aMgSIpCiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIHJlYWRNYWluUGFnZSgpOwoKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAvL2FsZXJ0KCLlvIDlp4vkuL7miqUiKTsKICAgICAgICBhZGREaXZJdGVtSW5mbygpOwogICAgICAgIG1haW5Qcm9jZXNzKDApOwogICAgfSw1MDApOwogICAgcmV0dXJuOwp9CgovL2FjdGlvbiBvbiBzdW1iaXR0aW5nIHBhZ2UKZnVuY3Rpb24gcGFnZVByb2Nlc3MoKXsKICAgIC8vYWxlcnQoInRlc3QiKTsKICAgIC8vZ2V0IHR5cGVzCiAgICBpZiAobG9jYXRpb24uaHJlZi5pbmRleE9mKCJhcmciKSA9PSAtMSl7Ly9jcml0ZXJpb24KICAgICAgICAvL2FsZXJ0KCJjYW5ub3QgcmVhZCByZXBvcnQgdHlwZSIpOwogICAgICAgIC8vc3VjY2Vzc19udW0gLT0gMTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICB2YXIgY2xhc3MxID0gZGVjb2RlVVJJKGxvY2F0aW9uLmhyZWYuc3BsaXQoIj8iKVsyXSkuc3BsaXQoIj0iKVsxXTsKICAgIHZhciBjbGFzczIgPSBkZWNvZGVVUkkobG9jYXRpb24uaHJlZi5zcGxpdCgiPyIpWzNdKS5zcGxpdCgiPSIpWzFdOwogICAgLy9zb21lIG5lZWQgbW9yZSBpbmZvCiAgICB2YXIgaW5mbyA9ICIiOwogICAgaWYoZGVjb2RlVVJJKGxvY2F0aW9uLmhyZWYuc3BsaXQoIj8iKVs0XSkuc3BsaXQoIj0iKVsxXSE9ICIiKXsKICAgICAgICBpbmZvID0gZGVjb2RlVVJJKGxvY2F0aW9uLmhyZWYuc3BsaXQoIj8iKVs0XSkuc3BsaXQoIj0iKVsxXTsKICAgIH0KICAgIC8vcmVsb2FkCiAgICB2YXIgb1VSTCA9IGxvY2F0aW9uLmhyZWYuc3BsaXQoIj9hcmciKVswXTsKICAgIC8vbG9jYXRpb24uaHJlZiA9IG9VUkw7CgogICAgLy8kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgLy9ub3QgZXhpdGVkCiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY29tcGxhaW50X2NvbiIpWzBdLmNoaWxkcmVuWzFdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJhIilbMF0udGV4dCA9PSAiQCIpewogICAgICAgIC8vYWxlcnQoIuW3sua2iOWksSIpCiAgICAgICAgd2luZG93LmNsb3NlKCk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgICAgIC8vMXN0IHN0ZXAKICAgIHZhciBjbGFzczFfYWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY29tcGxhaW50X2NvbiIpWzBdLmNoaWxkcmVuWzJdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaSIpOwogICAgICAgIC8vYmFkIGxpbmtzCiAgICAgICAgaWYoY2xhc3MxX2FsbC5sZW5ndGggPT0gMCl7CiAgICAgICAgICAgIGFsZXJ0KCLnvZHlnYDkuI3lr7kiKTsKICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7CiAgICAgICAgICAgIC8vc3VjY2Vzc19udW0gLT0gMTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICB2YXIgcklEMSA9IGdldFJlcG9ydElEKGNsYXNzMV9hbGwsY2xhc3MxLDEpOwoKICAgIGlmIChySUQxID09IC0xKXsKICAgICAgICAgICAgYWxlcnQoIkZhaWwgdG8gZmluZCB0aGUgdHlwZTogIiArIGNsYXNzMSk7CiAgICAgICAgICAgIC8vc3VjY2Vzc19udW0gLT0gMTsKICAgICAgICAgICAgcmV0dXJuOwogICAgfQogICAgZWxzZXsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjb21wbGFpbnRfY29uIilbMF0uY2hpbGRyZW5bMl0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoImxpIilbcklEMV0uY2xpY2soKTsKICAgICAgICAgICAgfSwyMDApOwogICAgfQogICAgLy9jaGVjayBpZiAxc3Qgc3VjY2VzcwogICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgaWYoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY29tcGxhaW50X2NvbiIpWzBdLmNoaWxkcmVuWzJdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaSIpW3JJRDFdLmNsYXNzTmFtZSAhPT0gImN1ciIpewogICAgICAgIGFsZXJ0KCJGYWlsIHRvIGNsaWNrIHRoZSB0eXBlOiAiICsgY2xhc3MxKTsKICAgICAgICByZXR1cm47CiAgICB9Cn0sNDUwKTsKICAgIC8vMm5kIHN0ZXAKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAvL2FsZXJ0KCIrKysiKQogICAgICAgIHZhciBjbGFzczJfYWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY29tcGxhaW50X2NvbiIpWzBdLmNoaWxkcmVuWzNdLmNoaWxkcmVuWzFdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaSIpOwogICAgICAgIHZhciBySUQyID0gZ2V0UmVwb3J0SUQoY2xhc3MyX2FsbCxjbGFzczIsMik7CiAgICAgICAgaWYgKHJJRDIgPT0gLTEpewogICAgICAgICAgICBhbGVydCgiRmFpbCB0byBmaW5kIHRoZSB0eXBlOiAiK2NsYXNzMik7CiAgICAgICAgICAgIC8vc3VjY2Vzc19udW0gLT0gMQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNvbXBsYWludF9jb24iKVswXS5jaGlsZHJlblszXS5jaGlsZHJlblsxXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgibGkiKVtySUQyXS5jbGljaygpOwogICAgICAgIH0KICAgIH0sNTAwKTsKICAgIC8vY2hlY2sgaWYgMm5kIHN1Y2Nlc3MKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNvbXBsYWludF9jb24iKVswXS5jaGlsZHJlblszXS5jaGlsZHJlblsxXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgibGkiKVtySUQyXS5jbGFzc05hbWUgIT09ICJjdXIiKXsKICAgICAgICBhbGVydCgiRmFpbCB0byBjbGljayB0aGUgdHlwZTogIiArIGNsYXNzMik7CiAgICAgICAgcmV0dXJuOwogICAgfQp9LDg1MCk7CiAgICAgICAgLy9mb3IgdGhvc2UgbmVlZCBtb3JlIGluZm9ybWF0aW9uCiAgICAgICAgaWYoaW5mby5sZW5ndGggPiAwKXsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiTS1pbnB1dCBNLWlucHV0LXRleHQiKVswXS52YWx1ZT1pbmZvOwogICAgICAgICAgICB9LDkwMCk7CiAgICAgICAgfQogICAgICAgIC8vM3JkIHN0ZXAKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCI9PT0iKQogICAgICAgICAgICAvL2RvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ20tY2hlY2tib3gnKVsyXS5jaGlsZHJlblswXS5jbGljaygpOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtLWNoZWNrYm94JylbMl0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiaW5wX2NoayIpWzBdLmNsaWNrKCk7CiAgICAgICAgfSwxMTAwKTsKICAgICAgICAvLzR0aCBzdGVwCiAgICAKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIm0tYnRuIG0tYnRuLWJsb2NrIG0tYnRuLW9yYW5nZSIpWzBdLmNsaWNrKCk7IC8vc3VibWl0CiAgICAgICAgfSwxNTAwKTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy9kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtLWJ0biBtLWJ0bi1ibG9jayBtLWJ0bi1vcmFuZ2UiKVswXS5jbGljaygpOyAvL3N1Ym1pdAogICAgICAgICAgICB2YXIgY2hlY2tfMSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNvbXBsYWludF90eHQiKVswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZHQiKVswXS5jaGlsZHJlblswXTsKICAgICAgICAgICAgLy9zb21ldGltZXMsIGZhaWwgdG8gc3VtYml0CiAgICAgICAgICAgIGlmKGNoZWNrXzEuY2xhc3NOYW1lICE9ICJtLWJ0biBtLWJ0bi1ibG9jayBtLWJ0bi1vcmFuZ2UgbS1idG4tZGlzYWJsZWQifHwgY2hlY2tfMS50ZXh0Q29udGVudC5pbmRleE9mKCLlt7LmipXor4nvvIzlj5fnkIbkuK0iKSA9PSAtMSl7CiAgICAgICAgICAgICAgICBhbGVydCgi5o+Q5Lqk5aSx6LSl77yM6K+35qOA5p+l5oiW5omL5Yqo5o+Q5LqkIik7CiAgICAgICAgICAgIH0KICAgICAgICB9LDMwMDApOwoKfQoKLy9nZXQgSUQgbnVtYmVyIGJ5IHRhZyByZWFkIGZyb21lIHdlaWJvCi8vdHlwZTogMSAtLS0gMXN0IGNsYXNzOyAyIC0tLSAybmQgY2xhc3MKZnVuY3Rpb24gZ2V0UmVwb3J0SUQobGksdGFyZ2V0TmFtZSx0eXBlKXsKICAgIHZhciB0YWdJRD0tMTsKICAgIHZhciBsaV9pPTA7CiAgICBpZih0eXBlID09IDEpewogICAgICAgIGZvcihsaV9pPTA7bGlfaTxsaS5sZW5ndGg7bGlfaSsrKXsKICAgICAgICAgICAgaWYgKGxpW2xpX2ldLnRpdGxlLmluZGV4T2YodGFyZ2V0TmFtZSkgIT0gLTEpewogICAgICAgICAgICAgICAgdGFnSUQgPSBsaV9pOwogICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYodHlwZSA9PSAyKXsKICAgICAgICBmb3IobGlfaT0wO2xpX2k8bGkubGVuZ3RoO2xpX2krKyl7CiAgICAgICAgICAgIGlmIChsaVtsaV9pXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpWzBdLnRleHQuaW5kZXhPZih0YXJnZXROYW1lKSAhPSAtMSl7CiAgICAgICAgICAgICAgICB0YWdJRCA9IGxpX2k7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGVsc2V7CiAgICAgICAgYWxlcnQoInVua293biB0eXBlIElEIik7CiAgICB9CiAgICByZXR1cm4gdGFnSUQ7Cn0KCi8vcmVhZCB3ZWlibyBwYWdlIGZvciBjb21wbGFpbgpmdW5jdGlvbiByZWFkTWFpblBhZ2UoKXsKICAgIGlmIChkb2N1bWVudC5VUkwuc3Vic3RyKDAsMTgpID09ICJodHRwczovL20ud2VpYm8uY24iKXsKICAgICAgICAvL2NvbnZlcnQgeG1sIHRvIHN0cmluZwogICAgICAgIHZhciB0ZXh0X2FsbCA9IChuZXcgWE1MU2VyaWFsaXplcigpKS5zZXJpYWxpemVUb1N0cmluZyhkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd3ZWliby10ZXh0JylbMF0pLnNwbGl0KCI8YnIgLz4iKTsKICAgICAgICB2YXIgdGkgPSAwOwogICAgICAgIHZhciB0ZW1wX3N0ciA9ICIiOwogICAgICAgIHZhciB0ZW1wX2luZm8gPSAiIjsKICAgICAgICAvL3ZhciB0ZXh0X2FsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3dlaWJvLXRleHQnKVswXS5pbm5lclRleHQuc3BsaXQoIlxuIik7CiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRleHRfYWxsLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgLy9hbGVydCgidGVzdCAiICsgaSk7CiAgICAgICAgICAgIC8vMTog6L+d5rOVLei\/neemgQogICAgICAgICAgICBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLov53ms5UiKSE9LTEgJiZ0ZXh0X2FsbFtpXS5pbmRleE9mKCLov53npoEiKSAhPSAtMSAmJiB0ZXh0X2FsbFtpKzFdIT0gdW5kZWZpbmVkKXsKICAgICAgICAgICAgICAgIC8vYWxlcnQoaSk7CiAgICAgICAgICAgICAgICBpICs9IDE7CiAgICAgICAgICAgICAgICB0aSA9IGk7CiAgICAgICAgICAgICAgICBmb3IodGk9aTt0aTwgdGV4dF9hbGwubGVuZ3RoO3RpKyspewogICAgICAgICAgICAgICAgICAgIGlmKHRleHRfYWxsW2ldLmluZGV4T2YoIue9kemhtemTvuaOpSIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy9jb3JyZWN0IHNvbWUgbGlua3MsIHRyYW5zZmVycmVkIGZyb20gaXBob25lCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCI8L2E+IilbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN1ZmZpeC5sZW5ndGg+MCAmJiAhKC8uKltcdTRlMDAtXHU5ZmE1XSsuKiQvLnRlc3Qoc3VmZml4KSkpey8v5Yik5pat5piv5ZCm5ZCr5pyJ5Lit5paH5a2X56ymOiDpmLLmraLmi6zlj7cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuc3VmZml4ID0gc3VmZml4LnNwbGl0KCI8L2Rpdj4iKVswXS5yZXBsYWNlKHJlZywiJiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gbnN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLy93b3JrIGZvciBkYXRhLXVybAogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3N0ciA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoJyInKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgYWxsWzBdW2NsYXNzX2FycmF5WzBdXSA9IHRlbXBfc3RyLnJlcGxhY2UocmVnLCImIikgKyBzdWZmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coaWxsZWdhbE9fYXJyYXlbaWxsZWdhbE90aGVyX25dKTsKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpbGxlZ2FsT3RoZXJfbiArPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19hcnJheVswXSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGV4dF9hbGxbaV0ubGVuZ3RoPT0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0xPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpICs9MTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy9uZXh0IGxpbmUgaGFzIOWwj+aMh+WktAogICAgICAgICAgICAgICAgICAgIC8vZW5jb2RlVVJJKHRleHRfYWxsW2ldKS5pbmRleE9mKCIlRjAlOUYlOTElODkiKS8v5bCP5oyH5aS0CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihlbmNvZGVVUkkodGV4dF9hbGxbaV0pLmluZGV4T2YoIiVGMCU5RiU5MSU4OSIpICE9IC0xIHx8IHRleHRfYWxsW2ldLmluZGV4T2YoIi0iKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mj09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSAtPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZWxzZXsvL3Vua25vd24gcHJvYmxlbQogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTM9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8yOiDlnoPlnL4t5YW25LuWCiAgICAgICAgICAgIGVsc2UgaWYodGV4dF9hbGxbaV0uaW5kZXhPZigi5Z6D5Zy+IikhPS0xICYmdGV4dF9hbGxbaV0uaW5kZXhPZigi5YW25LuWIikhPS0xJiYgdGV4dF9hbGxbaSsxXSE9dW5kZWZpbmVkKXsKICAgICAgICAgICAgICAgICBpICs9IDE7CiAgICAgICAgICAgICAgICBmb3IodGk9aTt0aTwgdGV4dF9hbGwubGVuZ3RoO3RpKyspewogICAgICAgICAgICAgICAgICAgIGlmKHRleHRfYWxsW2ldLmluZGV4T2YoIue9kemhtemTvuaOpSIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy9jb3JyZWN0IHNvbWUgbGlua3MsIHRyYW5zZmVycmVkIGZyb20gaXBob25lCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCI8L2E+IilbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN1ZmZpeC5sZW5ndGg+MCYmICEoLy4qW1x1NGUwMC1cdTlmYTVdKy4qJC8udGVzdChzdWZmaXgpKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciByZWcgPSBuZXcgUmVnRXhwKCImYW1wOyIsICJnIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnN1ZmZpeCA9IHN1ZmZpeC5zcGxpdCgiPC9kaXY+IilbMF0ucmVwbGFjZShyZWcsIiYiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9IG5zdWZmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vd29yayBmb3IgZGF0YS11cmwKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zdHIgPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCciJylbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFsxXVtjbGFzc19hcnJheVsxXV0gPSB0ZW1wX3N0ci5yZXBsYWNlKHJlZywiJiIpICsgc3VmZml4Oy8vdGVtcF9zdHJbMF0gKyB0ZW1wX3N0clsxXSArIHRlbXBfc3RyWzJdICsgc3VmZml4OwogICAgICAgICAgICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpdHRlck90aGVyX24gKz0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfYXJyYXlbMV0gKz0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRleHRfYWxsW2ldLmxlbmd0aD09MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09MT09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vbmV4dCBsaW5lIGhhcyDlsI\/mjIflpLQKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGVuY29kZVVSSSh0ZXh0X2FsbFtpXSkuaW5kZXhPZigiJUYwJTlGJTkxJTg5IikgIT0gLTEgfHwgdGV4dF9hbGxbaV0uaW5kZXhPZigiLSIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0yPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNley8vdW5rbm93biBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mz09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLzM6IOWeg+Wcvi3mmLXnp7AKICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLlnoPlnL4iKSE9LTEgJiZ0ZXh0X2FsbFtpXS5pbmRleE9mKCLmmLXnp7AiKSE9LTEmJiB0ZXh0X2FsbFtpKzFdIT11bmRlZmluZWQpewogICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgIGZvcih0aSA9IGk7dGkgPCB0ZXh0X2FsbC5sZW5ndGg7dGkrKyl7CiAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0iICsgaSkKICAgICAgICAgICAgICAgICAgICBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLnvZHpobXpk77mjqUiKSE9LTEpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgiJmFtcDsiLCAiZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAvL2NvcnJlY3Qgc29tZSBsaW5rcywgdHJhbnNmZXJyZWQgZnJvbSBpcGhvbmUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoIjwvYT4iKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3VmZml4Lmxlbmd0aD4wJiYgISgvLipbXHU0ZTAwLVx1OWZhNV0rLiokLy50ZXN0KHN1ZmZpeCkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuc3VmZml4ID0gc3VmZml4LnNwbGl0KCI8L2Rpdj4iKVswXS5yZXBsYWNlKHJlZywiJiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gbnN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBzb21lIGhhcyBkYXRhLXVybAogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3N0ciA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoJyInKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFsyXVtjbGFzc19hcnJheVsyXV0gPSB0ZW1wX3N0ci5yZXBsYWNlKHJlZywiJiIpICsgc3VmZml4Oy8vdGVtcF9zdHJbMF0gKyB0ZW1wX3N0clsxXSArIHRlbXBfc3RyWzJdICsgc3VmZml4OwogICAgICAgICAgICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpdHRlck5hbWVfbiArPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19hcnJheVsyXSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGV4dF9hbGxbaV0ubGVuZ3RoPT0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0xPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpICs9MTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy9uZXh0IGxpbmUgaGFzIOWwj+aMh+WktAogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoZW5jb2RlVVJJKHRleHRfYWxsW2ldKS5pbmRleE9mKCIlRjAlOUYlOTElODkiKSAhPSAtMSB8fCB0ZXh0X2FsbFtpXS5pbmRleE9mKCItIikgIT0gLTEpewogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTI9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBlbHNley8vdW5rbm93biBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mz09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLzQ6IOacieWusy3lhbbku5YKICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLmnInlrrMiKSE9LTEgJiZ0ZXh0X2FsbFtpXS5pbmRleE9mKCLlhbbku5YiKSE9LTEmJiB0ZXh0X2FsbFtpKzFdIT11bmRlZmluZWQpewogICAgICAgICAgICAgICAgLy9hbGVydChpKQogICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgIGZvcih0aSA9aTsgdGkgPCB0ZXh0X2FsbC5sZW5ndGg7dGkrKyl7CgogICAgICAgICAgICAgICAgICAgIGlmKHRleHRfYWxsW2ldLmluZGV4T2YoIue9kemhtemTvuaOpSIpIT0tMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKCImYW1wOyIsICJnIik7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29ycmVjdCBzb21lIGxpbmtzLCB0cmFuc2ZlcnJlZCBmcm9tIGlwaG9uZQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VmZml4ID0gdGV4dF9hbGxbaV0uc3BsaXQoJ2hyZWYnKVsxXS5zcGxpdCgiPC9hPiIpWzFdOwogICAgICAgICAgICAgICAgICAgICAgICBpZihzdWZmaXgubGVuZ3RoPjAmJiAhKC8uKltcdTRlMDAtXHU5ZmE1XSsuKiQvLnRlc3Qoc3VmZml4KSkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgcmVnID0gbmV3IFJlZ0V4cCgiJmFtcDsiLCAiZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5zdWZmaXggPSBzdWZmaXguc3BsaXQoIjwvZGl2PiIpWzBdLnJlcGxhY2UocmVnLCImIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSBuc3VmZml4OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIHNvbWUgaGFzIGRhdGEtdXJsCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc3RyID0gdGV4dF9hbGxbaV0uc3BsaXQoJ2hyZWYnKVsxXS5zcGxpdCgnIicpWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsWzNdW2NsYXNzX2FycmF5WzNdXSA9IHRlbXBfc3RyLnJlcGxhY2UocmVnLCImIikgKyBzdWZmaXg7Ly90ZW1wX3N0clswXSArIHRlbXBfc3RyWzFdICsgdGVtcF9zdHJbMl0gKyBzdWZmaXg7CgogICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUud2FybihiYWRPX2FycmF5W2JhZE90aGVyX25dKTsKICAgICAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgICAgICAgICBiYWRPdGhlcl9uICs9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzX2FycmF5WzNdICs9MTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5sZW5ndGg9PTApewogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTE9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvL25leHQgbGluZSBoYXMg5bCP5oyH5aS0IG9yICItIgogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoZW5jb2RlVVJJKHRleHRfYWxsW2ldKS5pbmRleE9mKCIlRjAlOUYlOTElODkiKSAhPSAtMSB8fCB0ZXh0X2FsbFtpXS5pbmRleE9mKCItIikgIT0gLTEpewogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTI9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vZW5jb2RlVVJJKHRleHRfYWxsW2ldKS5pbmRleE9mKCIlRjAlOUYlOTElODkiKS8v5bCP5oyH5aS0CiAgICAgICAgICAgICAgICAgICAgZWxzZXsvL3Vua25vd24gcHJvYmxlbQogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTM9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy81OiDmtonpu4Qt5L2O5L+XCiAgICAgICAgICAgIGVsc2UgaWYoKHRleHRfYWxsW2ldLmluZGV4T2YoIua2iem7hCIpIT0tMSB8fCB0ZXh0X2FsbFtpXS5pbmRleE9mKCLmtoloIikhPS0xKSAmJnRleHRfYWxsW2ldLmluZGV4T2YoIuS9juS\/lyIpIT0tMSYmIHRleHRfYWxsW2krMV0hPXVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgLy9hbGVydChpKQogICAgICAgICAgICAgICAgZm9yKHRpID1pOyB0aSA8IHRleHRfYWxsLmxlbmd0aDt0aSsrKXsKICAgICAgICAgICAgICAgICAgICBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLnvZHpobXpk77mjqUiKSE9LTEpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgiJmFtcDsiLCAiZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAvL2NvcnJlY3Qgc29tZSBsaW5rcywgdHJhbnNmZXJyZWQgZnJvbSBpcGhvbmUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoIjwvYT4iKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3VmZml4Lmxlbmd0aD4wJiYgISgvLipbXHU0ZTAwLVx1OWZhNV0rLiokLy50ZXN0KHN1ZmZpeCkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuc3VmZml4ID0gc3VmZml4LnNwbGl0KCI8L2Rpdj4iKVswXS5yZXBsYWNlKHJlZywiJiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gbnN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zdHIgPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCciJylbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxbNF1bY2xhc3NfYXJyYXlbNF1dID0gdGVtcF9zdHIucmVwbGFjZShyZWcsIiYiKSArIHN1ZmZpeDsvL3RlbXBfc3RyWzBdICsgdGVtcF9zdHJbMV0gKyB0ZW1wX3N0clsyXSArIHN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgICAgICAgICBzZXhMb3dfbiArPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19hcnJheVs0XSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGV4dF9hbGxbaV0ubGVuZ3RoPT0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0xPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpICs9MTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy9uZXh0IGxpbmUgaGFzIOWwj+aMh+WktCBvciAiLSIKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGVuY29kZVVSSSh0ZXh0X2FsbFtpXSkuaW5kZXhPZigiJUYwJTlGJTkxJTg5IikgIT0gLTEgfHwgdGV4dF9hbGxbaV0uaW5kZXhPZigiLSIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0yPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNley8vdW5rbm93biBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mz09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLzY6IOi\/neazlS3mr5Llk4EKICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLov53ms5UiKSE9LTEgJiZ0ZXh0X2FsbFtpXS5pbmRleE9mKCJkcCIpIT0tMSAmJiB0ZXh0X2FsbFtpKzFdIT11bmRlZmluZWQpewogICAgICAgICAgICAgICAgLy9hbGVydChpKQogICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgIGZvcih0aT1pO3RpIDwgdGV4dF9hbGwubGVuZ3RoO3RpKyspewogICAgICAgICAgICAgICAgICAgIGlmKHRleHRfYWxsW2ldLmluZGV4T2YoIue9kemhtemTvuaOpSIpIT0tMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKCImYW1wOyIsICJnIik7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29ycmVjdCBzb21lIGxpbmtzLCB0cmFuc2ZlcnJlZCBmcm9tIGlwaG9uZQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VmZml4ID0gdGV4dF9hbGxbaV0uc3BsaXQoJ2hyZWYnKVsxXS5zcGxpdCgiPC9hPiIpWzFdOwogICAgICAgICAgICAgICAgICAgICAgICBpZihzdWZmaXgubGVuZ3RoPjAgJiYgISgvLipbXHU0ZTAwLVx1OWZhNV0rLiokLy50ZXN0KHN1ZmZpeCkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuc3VmZml4ID0gc3VmZml4LnNwbGl0KCI8L2Rpdj4iKVswXS5yZXBsYWNlKHJlZywiJiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gbnN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zdHIgPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCciJylbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFs1XVtjbGFzc19hcnJheVs1XV0gPSB0ZW1wX3N0ci5yZXBsYWNlKHJlZywiJiIpICsgc3VmZml4Oy8vdGVtcF9zdHJbMF0gKyB0ZW1wX3N0clsxXSArIHRlbXBfc3RyWzJdICsgc3VmZml4OwogICAgICAgICAgICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgICAgICAgICAgIGlsbGVnYWxEcmFnX24gKz0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfYXJyYXlbNV0gKz0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRleHRfYWxsW2ldLmxlbmd0aD09MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09MT09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vbmV4dCBsaW5lIGhhcyDlsI\/mjIflpLQKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGVuY29kZVVSSSh0ZXh0X2FsbFtpXSkuaW5kZXhPZigiJUYwJTlGJTkxJTg5IikgIT0gLTEgfHwgdGV4dF9hbGxbaV0uaW5kZXhPZigiLSIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0yPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNley8vdW5rbm93biBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mz09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLzc6IOiviOmqly3kuI3lnKjku6XkuIoKICAgICAgICAgICAgLy90aGlzIHR5cGUgbmVlZCBtb3JlIGluZm8KICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCJ66aqXIikhPS0xICYmdGV4dF9hbGxbaV0uaW5kZXhPZigi5LiN5Zyo5Lul5LiKIikhPS0xICYmIHRleHRfYWxsW2krMV0hPXVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICAvL2FsZXJ0KGkpCiAgICAgICAgICAgICAgICBpICs9IDE7CiAgICAgICAgICAgICAgICB0ZW1wX2luZm8gPSAiIjsKICAgICAgICAgICAgICAgIC8vaWYgaW5mbyBhdCBiZWdpbgogICAgICAgICAgICAgICAgaWYoKHRleHRfYWxsW2ldLmluZGV4T2YoIue9kemhtemTvuaOpSIpID09IC0xKSAmJiB0ZXh0X2FsbFtpXS5sZW5ndGg+MCl7CiAgICAgICAgICAgICAgICAgICAgdGVtcF9pbmZvID0gdGV4dF9hbGxbaV07CiAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiKysrMSsrKyIpCiAgICAgICAgICAgICAgICAgICAgaSs9MTsKICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvcih0aT1pOyB0aSA8IHRleHRfYWxsLmxlbmd0aDsgdGkrKyl7CiAgICAgICAgICAgICAgICAgICAgaWYodGV4dF9hbGxbaV0uaW5kZXhPZigi572R6aG16ZO+5o6lIikhPS0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy9jb3JyZWN0IHNvbWUgbGlua3MsIHRyYW5zZmVycmVkIGZyb20gaXBob25lCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCI8L2E+IilbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN1ZmZpeC5sZW5ndGg+MCAmJiAhKC8uKltcdTRlMDAtXHU5ZmE1XSsuKiQvLnRlc3Qoc3VmZml4KSkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgcmVnID0gbmV3IFJlZ0V4cCgiJmFtcDsiLCAiZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5zdWZmaXggPSBzdWZmaXguc3BsaXQoIjwvZGl2PiIpWzBdLnJlcGxhY2UocmVnLCImIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSBuc3VmZml4OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3N0ciA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoJyInKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgYWxsWzZdW2NsYXNzX2FycmF5WzZdXSA9IHRlbXBfc3RyLnJlcGxhY2UocmVnLCImIikgKyBzdWZmaXg7Ly90ZW1wX3N0clswXSArIHRlbXBfc3RyWzFdICsgdGVtcF9zdHJbMl0gKyBzdWZmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgbGlhck90aGVyX24gKz0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfYXJyYXlbNl0gKz0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRleHRfYWxsW2ldLmxlbmd0aD09MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09MT09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vbmV4dCBsaW5lIGhhcyDlsI\/mjIflpLQgb3IgIi0iCiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihlbmNvZGVVUkkodGV4dF9hbGxbaV0pLmluZGV4T2YoIiVGMCU5RiU5MSU4OSIpICE9IC0xIHx8IHRleHRfYWxsW2ldLmluZGV4T2YoIi0iKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mj09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSAtPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZXsvL3Vua25vd24gcHJvYmxlbQogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTM9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGFsbF9pbmZvWzZdW2NsYXNzX2FycmF5WzZdLTFdID0gdGV4dF9hbGxbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoaSsgIiAiICt0ZXh0X2FsbFtpXSkKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vYWxlcnQoInRlbXBfaW5mbzogIiArdGVtcF9pbmZvKQogICAgICAgICAgICAgICAgLy9hbGVydChpKQogICAgICAgICAgICAgICAgLy9tYXliZSB0aGUgaW5mbyBhdCBlbmQKICAgICAgICAgICAgICAgIGlmKHRlbXBfaW5mbz09IiImJnRleHRfYWxsW2ktMV0uaW5kZXhPZigi572R6aG16ZO+5o6lIikgPT0gLTEgJiYgdGV4dF9hbGxbaS0xXS5sZW5ndGg+MCl7CiAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT09MT09PSIpCiAgICAgICAgICAgICAgICAgICAgLy9sYXN0IGxpbmUKICAgICAgICAgICAgICAgICAgICB0ZW1wX2luZm8gPSB0ZXh0X2FsbFtpLTFdOwogICAgICAgICAgICAgICAgICAgIC8vYWxlcnQodGVtcF9pbmZvKTsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBsaWFyX2kgPTAgO2xpYXJfaTxjbGFzc19hcnJheVs2XTtsaWFyX2krKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoYWxsX2luZm9bNl1bbGlhcl9pXSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbF9pbmZvWzZdW2xpYXJfaV09PSIiIHx8IGFsbF9pbmZvWzZdW2xpYXJfaV0gPT0gdW5kZWZpbmVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgYWxsX2luZm9bNl1bbGlhcl9pXSA9IHRlbXBfaW5mbzt9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgICAgICAgICAvLzg6IOS4jeWuni3kuI3lnKjku6XkuIoKICAgICAgICAgICAgLy90aGlzIHR5cGUgbmVlZCBtb3JlIGluZm8KICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLkuI3lrp4iKSE9LTEgJiZ0ZXh0X2FsbFtpXS5pbmRleE9mKCLkuI3lnKjku6XkuIoiKSE9LTEmJiB0ZXh0X2FsbFtpKzFdIT11bmRlZmluZWQpewogICAgICAgICAgICAgICAgLy9hbGVydChpKTsKICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgIC8vdGkgPSBpOwogICAgICAgICAgICAgICAgdGVtcF9pbmZvID0gIiI7CiAgICAgICAgICAgICAgICAvL2lmIGluZm8gYXQgYmVnaW4KICAgICAgICAgICAgICAgIGlmKCh0ZXh0X2FsbFtpXS5pbmRleE9mKCLnvZHpobXpk77mjqUiKSA9PSAtMSkgJiYgdGV4dF9hbGxbaV0ubGVuZ3RoPjApewogICAgICAgICAgICAgICAgICAgIHRlbXBfaW5mbyA9IHRleHRfYWxsW2ldOwogICAgICAgICAgICAgICAgICAgIGkrPTE7CiAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IodGk9aTt0aTwgdGV4dF9hbGwubGVuZ3RoO3RpKyspewogICAgICAgICAgICAgICAgICAgIC8vYWxlcnQodGV4dF9hbGxbaV0pCiAgICAgICAgICAgICAgICAgICAgaWYodGV4dF9hbGxbaV0uaW5kZXhPZigi572R6aG16ZO+5o6lIikgIT0gLTEpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgiJmFtcDsiLCAiZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAvL2NvcnJlY3Qgc29tZSBsaW5rcywgdHJhbnNmZXJyZWQgZnJvbSBpcGhvbmUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoIjwvYT4iKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3VmZml4Lmxlbmd0aD4wICYmICEoLy4qW1x1NGUwMC1cdTlmYTVdKy4qJC8udGVzdChzdWZmaXgpKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciByZWcgPSBuZXcgUmVnRXhwKCImYW1wOyIsICJnIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnN1ZmZpeCA9IHN1ZmZpeC5zcGxpdCgiPC9kaXY+IilbMF0ucmVwbGFjZShyZWcsIiYiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9IG5zdWZmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09MDA9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc3RyID0gdGV4dF9hbGxbaV0uc3BsaXQoJ2hyZWYnKVsxXS5zcGxpdCgnIicpWzFdOwogICAgICAgICAgICAgICAgICAgICAgICBhbGxbN11bY2xhc3NfYXJyYXlbN11dID0gdGVtcF9zdHIucmVwbGFjZShyZWcsIiYiKSArIHN1ZmZpeDsvL3RlbXBfc3RyWzBdICsgdGVtcF9zdHJbMV0gKyB0ZW1wX3N0clsyXSArIHN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgICAgICAgICBub3JlYWxPdGhlcl9uICs9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzX2FycmF5WzddICs9MTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5sZW5ndGg9PTApewogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTE9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvL25leHQgbGluZSBoYXMg5bCP5oyH5aS0ICItIgogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoZW5jb2RlVVJJKHRleHRfYWxsW2ldKS5pbmRleE9mKCIlRjAlOUYlOTElODkiKSAhPSAtMSB8fCB0ZXh0X2FsbFtpXS5pbmRleE9mKCItIikgIT0gLTEpewogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTI9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBlbHNley8vdW5rbm93biBwcm9ibGVtLy8vL3Nob3VsZCBiZSBpbmZvIGZvciBsYXN0IG9uZQogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTM9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGFsbF9pbmZvWzddW2NsYXNzX2FycmF5WzddLTFdID0gdGV4dF9hbGxbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL21heWJlIHRoZSBpbmZvIGF0IGVuZAogICAgICAgICAgICAgICAgaWYodGVtcF9pbmZvPT0iIiYmdGV4dF9hbGxbaS0xXS5pbmRleE9mKCLnvZHpobXpk77mjqUiKSA9PSAtMSAmJiB0ZXh0X2FsbFtpLTFdLmxlbmd0aD4wKXsKICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PT0xPT09IikKICAgICAgICAgICAgICAgICAgICAvL2xhc3QgbGluZQogICAgICAgICAgICAgICAgICAgIHRlbXBfaW5mbyA9IHRleHRfYWxsW2ktMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvL2FsZXJ0KHRlbXBfaW5mbykKICAgICAgICAgICAgICAgICAgICBmb3IodmFyIG5vcmVhbF9pID0wIDtub3JlYWxfaTxjbGFzc19hcnJheVs3XTtub3JlYWxfaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbF9pbmZvWzddW25vcmVhbF9pXT09IiIgfHwgYWxsX2luZm9bN11bbm9yZWFsX2ldID09IHVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsbF9pbmZvWzddW25vcmVhbF9pXSA9IHRlbXBfaW5mbzt9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIisrIiArIGFsbF9pbmZvWzddW25vcmVhbF9pXSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy85OiDmnInlrrMt5pq05oGQCiAgICAgICAgICAgIGVsc2UgaWYodGV4dF9hbGxbaV0uaW5kZXhPZigi5pyJ5a6zIikhPS0xICYmdGV4dF9hbGxbaV0uaW5kZXhPZigi5pq05oGQIikhPS0xJiYgdGV4dF9hbGxbaSsxXSE9dW5kZWZpbmVkKXsKICAgICAgICAgICAgICAgIC8vYWxlcnQoaSkKICAgICAgICAgICAgICAgICBpICs9IDE7CiAgICAgICAgICAgICAgICAvL3ZhciB0aSA9IGk7CiAgICAgICAgICAgICAgICBmb3IodGk9aTt0aTwgdGV4dF9hbGwubGVuZ3RoO3RpKyspewogICAgICAgICAgICAgICAgICAgIGlmKHRleHRfYWxsW2ldLmluZGV4T2YoIue9kemhtemTvuaOpSIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy9jb3JyZWN0IHNvbWUgbGlua3MsIHRyYW5zZmVycmVkIGZyb20gaXBob25lCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCI8L2E+IilbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN1ZmZpeC5sZW5ndGg+MCAmJiAhKC8uKltcdTRlMDAtXHU5ZmE1XSsuKiQvLnRlc3Qoc3VmZml4KSkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgcmVnID0gbmV3IFJlZ0V4cCgiJmFtcDsiLCAiZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5zdWZmaXggPSBzdWZmaXguc3BsaXQoIjwvZGl2PiIpWzBdLnJlcGxhY2UocmVnLCImIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSBuc3VmZml4OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3N0ciA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoJyInKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgYWxsWzhdW2NsYXNzX2FycmF5WzhdXSA9IHRlbXBfc3RyLnJlcGxhY2UocmVnLCImIikgKyBzdWZmaXg7Ly90ZW1wX3N0clswXSArIHRlbXBfc3RyWzFdICsgdGVtcF9zdHJbMl0gKyBzdWZmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfYXJyYXlbOF0gKz0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRleHRfYWxsW2ldLmxlbmd0aD09MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09MT09IikKICAgICAgICAgICAgICAgICAgICAgICAgaSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vbmV4dCBsaW5lIGhhcyDlsI\/mjIflpLQKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGVuY29kZVVSSSh0ZXh0X2FsbFtpXSkuaW5kZXhPZigiJUYwJTlGJTkxJTg5IikgIT0gLTEgfHwgdGV4dF9hbGxbaV0uaW5kZXhPZigiLSIpICE9IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0yPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNley8vdW5rbm93biBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mz09IikKICAgICAgICAgICAgICAgICAgICAgICAgLy9pIC09IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8xMDog5Z6D5Zy+LeWktOWDjwogICAgICAgICAgICBlbHNlIGlmKHRleHRfYWxsW2ldLmluZGV4T2YoIuWeg+WcviIpIT0tMSAmJnRleHRfYWxsW2ldLmluZGV4T2YoIuWktOWDjyIpIT0tMSYmIHRleHRfYWxsW2krMV0hPXVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICAvL2FsZXJ0KGkpCiAgICAgICAgICAgICAgICAgaSArPSAxOwogICAgICAgICAgICAgICAgLy92YXIgdGkgPSBpOwogICAgICAgICAgICAgICAgZm9yKHRpPWk7dGk8IHRleHRfYWxsLmxlbmd0aDt0aSsrKXsKICAgICAgICAgICAgICAgICAgICBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLnvZHpobXpk77mjqUiKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKCImYW1wOyIsICJnIik7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29ycmVjdCBzb21lIGxpbmtzLCB0cmFuc2ZlcnJlZCBmcm9tIGlwaG9uZQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VmZml4ID0gdGV4dF9hbGxbaV0uc3BsaXQoJ2hyZWYnKVsxXS5zcGxpdCgiPC9hPiIpWzFdOwogICAgICAgICAgICAgICAgICAgICAgICBpZihzdWZmaXgubGVuZ3RoPjAgJiYgISgvLipbXHU0ZTAwLVx1OWZhNV0rLiokLy50ZXN0KHN1ZmZpeCkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHJlZyA9IG5ldyBSZWdFeHAoIiZhbXA7IiwgImciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuc3VmZml4ID0gc3VmZml4LnNwbGl0KCI8L2Rpdj4iKVswXS5yZXBsYWNlKHJlZywiJiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gbnN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc3RyID0gdGV4dF9hbGxbaV0uc3BsaXQoJ2hyZWYnKVsxXS5zcGxpdCgnIicpWzFdOwogICAgICAgICAgICAgICAgICAgICAgICBhbGxbOV1bY2xhc3NfYXJyYXlbOV1dID0gdGVtcF9zdHIucmVwbGFjZShyZWcsIiYiKSArIHN1ZmZpeDsvL3RlbXBfc3RyWzBdICsgdGVtcF9zdHJbMV0gKyB0ZW1wX3N0clsyXSArIHN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19hcnJheVs5XSArPTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGV4dF9hbGxbaV0ubGVuZ3RoPT0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgiPT0xPT0iKQogICAgICAgICAgICAgICAgICAgICAgICBpICs9MTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy9uZXh0IGxpbmUgaGFzIOWwj+aMh+WktAogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoZW5jb2RlVVJJKHRleHRfYWxsW2ldKS5pbmRleE9mKCIlRjAlOUYlOTElODkiKSAhPSAtMSB8fCB0ZXh0X2FsbFtpXS5pbmRleE9mKCItIikgIT0gLTEpewogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTI9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoaSkKICAgICAgICAgICAgICAgICAgICAgICAgaSAtPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZXsvL3Vua25vd24gcHJvYmxlbQogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTM9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIC8vaSAtPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vMTE6IOa2iem7hC3lpLTlg48KICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5pbmRleE9mKCLmtonpu4QiKSE9LTEgJiZ0ZXh0X2FsbFtpXS5pbmRleE9mKCLlpLTlg48iKSE9LTEmJiB0ZXh0X2FsbFtpKzFdIT11bmRlZmluZWQpewogICAgICAgICAgICAgICAgLy9hbGVydChpKQogICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgIC8vdmFyIHRpID0gaTsKICAgICAgICAgICAgICAgIGZvcih0aT1pO3RpPCB0ZXh0X2FsbC5sZW5ndGg7dGkrKyl7CiAgICAgICAgICAgICAgICAgICAgaWYodGV4dF9hbGxbaV0uaW5kZXhPZigi572R6aG16ZO+5o6lIikgIT0gLTEpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgiJmFtcDsiLCAiZyIpOwogICAgICAgICAgICAgICAgICAgICAgICAvL2NvcnJlY3Qgc29tZSBsaW5rcywgdHJhbnNmZXJyZWQgZnJvbSBpcGhvbmUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IHRleHRfYWxsW2ldLnNwbGl0KCdocmVmJylbMV0uc3BsaXQoIjwvYT4iKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3VmZml4Lmxlbmd0aD4wICYmICEoLy4qW1x1NGUwMC1cdTlmYTVdKy4qJC8udGVzdChzdWZmaXgpKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuc3VmZml4ID0gc3VmZml4LnNwbGl0KCI8L2Rpdj4iKVswXS5yZXBsYWNlKHJlZywiJiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gbnN1ZmZpeDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zdHIgPSB0ZXh0X2FsbFtpXS5zcGxpdCgnaHJlZicpWzFdLnNwbGl0KCciJylbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFsxMF1bY2xhc3NfYXJyYXlbMTBdXSA9IHRlbXBfc3RyLnJlcGxhY2UocmVnLCImIikgKyBzdWZmaXg7Ly90ZW1wX3N0clswXSArIHRlbXBfc3RyWzFdICsgdGVtcF9zdHJbMl0gKyBzdWZmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfYXJyYXlbMTBdICs9MTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0ZXh0X2FsbFtpXS5sZW5ndGg9PTApewogICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KCI9PTE9PSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0xOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvL25leHQgbGluZSBoYXMg5bCP5oyH5aS0CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihlbmNvZGVVUkkodGV4dF9hbGxbaV0pLmluZGV4T2YoIiVGMCU5RiU5MSU4OSIpICE9IC0xIHx8IHRleHRfYWxsW2ldLmluZGV4T2YoIi0iKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mj09IikKICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydChpKQogICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNley8vdW5rbm93biBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIj09Mz09IikKICAgICAgICAgICAgICAgICAgICAgICAgLy9pIC09IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZXt9OwogICAgICAgIH0KICAgIH0KICAgIGVsc2V7Ly9zaG91bGQgbm90IHJ1biBoZXJlCiAgICAgICAgYWxlcnQoIuS4jeaYr+ato+ehrumhtemdoiIpOwogICAgfQp9CgpmdW5jdGlvbiBtYWluUHJvY2VzcyhpKXsKICAgIC8vYWxlcnQodHlwZU51bSkKICAgIGlmKGkgPT0gdHlwZU51bSl7CiAgICAgICAgYXBwZW5kSXRlbUNvbmVudCgi5oGt5Zac5oKo5a6M5oiQ5Li+5oqlISIpOwogICAgICAgIC8vcmVwbHkKICAgICAgICByZXR1cm47CiAgICB9CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgLy9hbGVydCgiPT09MT09PSIpCiAgICB2YXIgZmxhZ19rID0gcmVwb3J0UHJvY2VzcyhpLDApOwogIH0sMTAwKTsKCn0KCmZ1bmN0aW9uIHJlcG9ydFByb2Nlc3MoayxtKXsKICAgIGlmKGs9PXR5cGVOdW0pewogICAgICAgIHJldHVybigtMSk7CiAgICB9CiAgICBpZihjbGFzc19hcnJheVtrXSA9PSAwKXsKICAgICAgICBrICs9IDE7CiAgICAgICAgbWFpblByb2Nlc3Moayk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgaWYoazx0eXBlTnVtKXsKICAgICAgICAvL3R5cGVLZXlXb3JkX2FycmF5OiBrZXkgd29yZHMKICAgICAgICAvL2NsYXNzX2FycmF5OiBzaXplIG9mIGVhY2ggdHlwZQogICAgICAgIGNsYXNzRHVyID0gKGNsYXNzX2FycmF5W21dICogNS4yKSoxMDAwOwogICAgICAgIGlmKG0gPT0gY2xhc3NfYXJyYXlba10pewogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZihzdWNjZXNzX251bSA+IDApewogICAgICAgICAgICAgICAgICAgIGFwcGVuZEl0ZW1Db25lbnQoIuaIkOWKn+S4vuaKpTogIitzdWNjZXNzX251bSArIumhuSAiKyB0eXBlS2V5V29yZF9hcnJheVtrXSk7CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc19udW0gPSAwOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgayArPSAxOwogICAgICAgICAgICAgICAgICAgIG1haW5Qcm9jZXNzKGspOwogICAgICAgICAgICAgfSwxMDAwKTsvL25vdCBkdXJhdGlvbiBmb3IgdGhlIHdob2xlIHR5cGUgZ3JvdXAKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmVwb3J0T25lVHlwZShrLG0pOwogICAgICAgICAgICAgICAgfSwxMDApOwogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gcmVwb3J0T25lVHlwZShsLG4pewogICAgYzEgPSB0eXBlS2V5V29yZF9hcnJheVtsXS5zcGxpdCgiLSIpWzBdOwogICAgYzIgPSB0eXBlS2V5V29yZF9hcnJheVtsXS5zcGxpdCgiLSIpWzFdOwogICAgdmFyIGluZiA9IGFsbF9pbmZvW2xdW25dOwoKICAgIGlmKGluZiA9PSB1bmRlZmluZWQpewogICAgICAgIGluZiA9ICIiOwogICAgfQogICAgZWxzZXsKICAgICAgICBpbmYgPSBpbmYuc3BsaXQoIjwiKVswXTsvL3NvbWV0aW1lcyB0aGUgdGV4dCBlbmRzIHdpdGg8L2Rpdj4KICAgIH0KCiAgICB2YXIgdXJsID0gYWxsW2xdW25dICsgIj9hcmcxPSIrYzEgKyI\/YXJnMj0iK2MyICsiP2luZm89IitpbmY7CiAgICB2YXIgcl9pID0gInJfIiArIGwudG9TdHJpbmcoKSArICJfIiArIG4udG9TdHJpbmcoKTsKICAgIC8vaWYobiA8IGNsYXNzX2FycmF5W2xdKXsKICAgICAgICByZXBvcnRQYWdlKHVybCxyX2kpOwogICAgICAgIG4gKz0gMTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgcmVwb3J0UHJvY2VzcyhsLG4pOwogICAgLy99LDEwMDApOwogICAgfSw1MTAwKTsKfQoKICBmdW5jdGlvbiByZXBvcnRQYWdlKHVybCx3aW5fbmFtZSl7CiAgICBjb25zb2xlLmxvZyh1cmwpOwogICAgLy92YXIgdyA9IEdNX29wZW5JblRhYih1cmwsIHsgYWN0aXZlOiBmYWxzZSwgaW5zZXJ0OiB0cnVlLCBzZXRQYXJlbnQgOnRydWUgfSk7CiAgICAvL2VhY2ggd2luZG93IG9ubHkgbmVlZCAzcwogICAgLy9jaGVjayBicm93ZXIgbmFtZQogICAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKICAgIHZhciB3OwoKICAgIGlmKHVzZXJBZ2VudC5pbmRleE9mKCJpcGhvbmUiKSA+IC0xIHx8IHVzZXJBZ2VudC5pbmRleE9mKCJtYWMgb3MiKSA+IC0xIHx8IHVzZXJBZ2VudC5pbmRleE9mKCJhbmRyb2lkIikpewogICAgICB3ID0gb3Blbih1cmwsd2luX25hbWUpOwogICAgfQogICAgZWxzZXsKICAgICAgdyA9IG9wZW4odXJsLHdpbl9uYW1lLCdoZWlnaHQ9MzAwLCB3aWR0aD0yMDAnKTsKICAgIH0KICAgIHcuZm9jdXMoKTsKICAgIC8vZGVsYXkgMjBzLCBsZXQgZW5vdWdoIHRpbWUgdG8gb3BlbiB0aGUgVVJMIG9uIHRoZSBuZXcgdGFiCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgIHcuY2xvc2UoKTsKICAgICAgaWYody5jbG9zZWQpewogICAgICAgIHN1Y2Nlc3NfbnVtICs9IDE7CiAgICAgIH0KICAgIH0sNTAwMCk7CiAgfQoKCgovLz09PT09PT09PT09PT09PT09IGF1dG8gY2xlYW4gPT09PT09PT09PT09PT09CgovL3N0YXJ0IGZ1bmN0aW9uIGZvciBhdXRvIGNsZWFuCmZ1bmN0aW9uIHN0YXJ0KCl7CiAgICAvL2NoZWNrIGlmIGZvciDnjovmupAKICAgIHZhciBjaGFvaHVhVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ3ZWliby10ZXh0IilbMF0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgic3VybC10ZXh0IilbMF0udGV4dENvbnRlbnQ7CiAgICBpZihjaGFvaHVhVGl0bGUuc2VhcmNoKCLnjovmupAiKSA9PSAtMSl7CiAgICAgICAgd2luZG93LmFsZXJ0KCLpnZ7njovmupAsIOmAgOWHuiIpOwogICAgICAgIHJldHVybjsKICAgIH0KICAgIC8vY2hlY2sgYXV0aG9ycwogICAgLy9jaGVjayBpZiBmcm9tIEBDYXJlUm95X+eOi+a6kOWPjem7kee7hAogICAgdmFyIGF1dGhvciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIndlaWJvLXRvcCBtLWJveCIpWzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIm0tdGV4dC1ib3giKVswXS5jaGlsZHJlblswXS5pbm5lclRleHQ7CiAgICBpZiAoYXV0aG9yLmluZGV4T2YoIkNhcmVSb3lf546L5rqQ5Y+N6buR57uEIikgPT0gLTEgJiYgYXV0aG9yLmluZGV4T2YoIua6kOWtkOW8ueW3peWOgiIpID09IC0xICYmIGF1dGhvci5pbmRleE9mKCJCYXR0bGVBbmdlbHNf546L5rqQ5omT5oqV56uZIikgPT0gLTEpewogICAgICAgICAgICBhbGVydCgiRXJyb3I6IOmdnkBDYXJlUm95X+eOi+a6kOWPjem7kee7hCBAQmF0dGxlQW5nZWxzX+eOi+a6kOaJk+aKleermSBA5rqQ5a2Q5by55bel5Y6C77yM5LiN5pSv5oyBIikKICAgICAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIGlzUnVuID0gZmFsc2U7CiAgICB2YXIgcHJvY2Vzc19pbnB1dCA9IHByb21wdCgi6K+36L6T5YWl5YeA5YyW5qyh5pWw77yaIiwgNSk7CiAgICBwcm9jZXNzX3RpbWUgPSBwYXJzZUludChwcm9jZXNzX2lucHV0KTsKICAgIC8vd2hlbiB1c2VyIGNob29zZSAiY2FuY2VsIgogICAgaWYocHJvY2Vzc19pbnB1dCA9PSBudWxsKSB7CiAgICAgICAgd2luZG93LmFsZXJ0KCLpgIDlh7oiKTsKICAgIH0KICAgIC8vd2hlbiBpbnB1dCBpcyBub25lLCA8MCwgc3RyaW5nCiAgICBlbHNlIGlmIChpc05hTihwcm9jZXNzX3RpbWUpIHx8IHByb2Nlc3NfdGltZSA8PSAwKXsKICAgICAgICB3aW5kb3cuYWxlcnQoIuaXoOaViOi+k+WFpe+8jOmHjeaWsOW8gOWniyIpOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgc3RhcnQoKTsKICAgICAgICAgICAgfSw1MDApOwogICAgICAgIH0KICAgIGVsc2V7CiAgICAgICAgLy9hZGQgaW5mb3JtYXRpb24gb24gd2Vic2l0ZQogICAgICAgIGFkZERpdkl0ZW1JbmZvUmlnaHQoKTsKICAgICAgICAvL2NoZWNrIGFsbCBkYXRhLXVybCBsaW5rcwogICAgICAgIC8vbW9kaWZ5SXRlbUNvbmVudCgi5q2j5Zyo6K+G5Yir6ZO+5o6l77yM6K+356iN5L6vLi4uIik7CiAgICAgICAgc2VsZWN0TGlua3MoKTsKICAgICAgICBjb25zb2xlLmxvZygiZWZmZWN0aXZlX2xpbmtzX251bTogIiArIGVmZmVjdGl2ZV9saW5rc19udW0pOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICBpZiAoZWZmZWN0aXZlX2xpbmtzX251bSA8IDEpewogICAgICAgICAgICBtb2RpZnlJdGVtQ29uZW50KCLml6Dlh4DljJbpk77mjqXvvIzlt7LpgIDlh7oiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgbW9kaWZ5SXRlbUNvbmVudCgi5qyi6L+O5L2\/55So77yM5oKo5bCG6L+Q6KGMOiAiICtwcm9jZXNzX3RpbWUrICIg5qyh5b6q546vIik7CiAgICAgICAgICAgIHJlYWxfbGlua3NfbnVtID0gMDsKICAgICAgICAgICAgb25lUHJvY2VzcygwKTsKICAgICAgICB9CiAgICB9LDEwMCk7CiAgICB9Cn0KCi8vZHVyYXRpb24gaXMgMTAgbWludXRlcyBmb3IgZWFjaCBsb29wCmZ1bmN0aW9uIG9uZVByb2Nlc3Moayl7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAganVkZ2VNYWluKGspOwogICAgfSwxMDApOwp9CmZ1bmN0aW9uIGp1ZGdlTWFpbihtKXsKICBsZXQgdGVzdCA9IG5ldyBEYXRlKCk7CiAgICB0MSA9IHRlc3QuZ2V0VGltZSgpOwogICAgLy90MSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgY29uc29sZS5sb2codGVzdC50b0xvY2FsZVRpbWVTdHJpbmcoKSk7CiAgICAvL2lmKG0gPCAocHJvY2Vzc190aW1lLTEpKXsKICAgIGlmKG0gPCBwcm9jZXNzX3RpbWUpewogICAgICAgIG1vZGlmeUl0ZW1Db25lbnQoIuasoui\/juS9v+eUqO+8jOato+WcqOi\/kOihjOesrCAiICsgKG0rMSkgKyIg5Liq5b6q546vIC4gLiAuIik7CiAgICAgICAgcmVhbF9saW5rc19udW0gPSAwOyAgICAgICAgCiAgICAgICAgY29udGludW91c09wZW51cmxzVGVzdCgwLG0pOwogICAgICAgIAogICAgICAgIGlmKG0gPT0gcHJvY2Vzc190aW1lLTEpewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfSAgICAKICAgIH0KICAgIC8vaXQgd2lsbCB3b3JrCiAgICBlbHNlewogICAgICAgIG1vZGlmeUl0ZW1Db25lbnQoIuW3sue7k+adnzog5YWxICIrbSsiIOasoeW+queOryIpOwogICAgICAgIC8vcmVwbHkKICAgICAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtLWJveC1jZW50ZXItYSBtYWluLXRleHQgbS10ZXh0LWN1dCBmb2N1cyIpWzBdLmNsaWNrKCk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ0ZXh0YXJlYS1ib3giKVswXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ0ZXh0YXJlYSIpWzBdLnRleHRDb250ZW50ID0gIuWImiI7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJidG4tc2VuZCIpWzBdLmNsYXNzTmFtZSA9ICJidG4tc2VuZCI7Ly9sZXQgIuWPkemAgSIgY2xpY2thYmxlCiAgICAgICAgICAgICAgICAqLwogICAgfQp9CgogIGZ1bmN0aW9uIGNvbnRpbnVvdXNPcGVudXJsc1Rlc3QodGksdG0pewogICAgY29uc29sZS5sb2coImNvbnRpbnVvdXNPcGVudXJsc1Rlc3QgdGk6ICIgKyB0aSk7CiAgICBsZXQgd19pX3N0ciA9ICJ3aW5fYyIgKyB0bS50b1N0cmluZygpICsgIl8iOwoKICAgIHZhciBpX2lkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXsKICAgICAgd19pX3N0ciA9ICJ3aW5fYyIgKyB0bS50b1N0cmluZygpICsgIl8iICsgdGkudG9TdHJpbmcoKTsKICAgICAgb3BlblVSTChsaW5rX2FycnlbdGldLHdfaV9zdHIpOwogICAgICAvL2NvbnNvbGUubG9nKHdfaV9zdHIpOwogICAgICB0aSArPSAxOwogICAgICByZWFsX2xpbmtzX251bSArPSAxOwogICAgICAgICAgICAKICAgICAgaWYodGkgPT09IGVmZmVjdGl2ZV9saW5rc19udW0gJiYgdG0gPCBwcm9jZXNzX3RpbWUtMSl7CiAgICAgICAgICAgICAgCiAgICAgICAgY2xlYXJJbnRlcnZhbChpX2lkKTsKICAgICAgICB0bSArPSAxOwogICAgICAgIC8vY29uc29sZS5sb2coInRlc3Q6ICIgKyB0aSArICIgIiArdG0pOwogCgogICAgICAgIGxldCB0ZXN0MyA9IG5ldyBEYXRlKCk7CiAgICAgICAgY29uc29sZS5sb2codGVzdDMudG9Mb2NhbGVUaW1lU3RyaW5nKCkpOwogICAgICAgIGNvbnNvbGUubG9nKCI9PT09PT0iKTsKCgogICAgICAgIHZhciBiYXNlX3N0ciA9ICLnrKwgIisodG0pKyIg5Liq5b6q546v5YWx5YeA5YyWOiAiK3JlYWxfbGlua3NfbnVtKyIg6aG577yM5LiL5LiA5qyh6K+3562J5b6FOiAiOwogICAgICAgIGNvbnNvbGUubG9nKGJhc2Vfc3RyKTsKCgoKICAgICAgICAvL3ZhciB0aW1lciA9IE1hdGguY2VpbCgoZGVsYXlMb29wLSh0Mi10MSkpLzEwMDApIC0gMjsKICAgICAgICB2YXIgdGltZXIgPSA2MDsKICAgICAgICB2YXIgaWlfaWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpewogICAgICAgICAgdGltZXIgLT0xOwogICAgICAgICAgdmFyIGFsbF9zdHIgPSBiYXNlX3N0ciArICh0aW1lcikgKyAiIHMiOwogICAgICAgICAgbW9kaWZ5SXRlbUNvbmVudChhbGxfc3RyKTsKICAgICAgICAgIGlmKHRpbWVyIDw9IDApewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWlfaWQpOwogICAgICAgICAgICByZWFsX2xpbmtzX251bSA9IDA7IAogICAgICAgICAgICBqdWRnZU1haW4odG0pOwoKICAgICAgICAgIH0KICAgICAgICB9LDEwMDApOwoKICAgICAgfQoKCiAgICAgIGVsc2UgaWYodGkgPT09IGVmZmVjdGl2ZV9saW5rc19udW0gJiYgdG0gPT09IHByb2Nlc3NfdGltZS0xKXsKICAgICAgICBjbGVhckludGVydmFsKGlfaWQpOwogICAgICAgIHRtICs9IDE7CiAgICAgICAganVkZ2VNYWluKHRtKTsKICAgICAgfQoKICAgIH0sMzAwMCk7IC8vb3BlbiBvbmUgdGFiIGV2ZXJ5IDMgcwogIH0KCmZ1bmN0aW9uIG9wZW5VUkwodXJsLHdfaSl7CiAgICAvL2NoZWNrIGJyb3dlciBuYW1lCiAgICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpOwogICAgdmFyIHc7CiAgICAvL+WIpOaWreiuvuWkhwogICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCJhbmRyb2lkIikgPiAtMSkgeyAvL2FuZHJvaWQKICAgICAgICB3ID0gb3Blbih1cmwsd19pKTsKICAgICAgICBjb25zb2xlLmxvZygiYW5kcm9pZCIpOwogICAgICAgIGZvY3VzKCk7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB3LmNsb3NlKCk7CiAgICAgICAgfSxkZWxheU9uZSk7CgogICAgfQogICAgZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoImlwaG9uZSIpID4gLTEpIHsgLy9pcGhvbmUKICAgICAgICB3ID0gb3Blbih1cmwsd19pKTsKICAgICAgICAvL2NvbnNvbGUubG9nKCJpcGhvbmUiKTsKICAgICAgICB3LmZvY3VzKCk7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB3LmNsb3NlKCk7CiAgICAgICAgfSxkZWxheU9uZSk7CiAgICB9CiAgICBlbHNlIHsgLy9pcGFkCiAgICAgICAgdyA9IG9wZW4odXJsLHdfaSk7CiAgICAgICAgLy9jb25zb2xlLmxvZygiaXBhZCIpOwogICAgICAgIGZvY3VzKCk7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB3LmNsb3NlKCk7CiAgICAgICAgfSxkZWxheU9uZSk7CiAgICB9CiAgICAKfQovL2dldCBhbGwgZWZmZWN0aXZlIGxpbmtzLCBzdG9yZSB0byBsaW5rX2FycmF5CmZ1bmN0aW9uIHNlbGVjdExpbmtzKCl7ICAgCiAgICB2YXIgbGlua19sZW5ndGggPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd3ZWliby10ZXh0JylbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKS5sZW5ndGg7CiAgICBpZihsaW5rX2xlbmd0aCA8IDEpewogICAgICAgIHdpbmRvdy5hbGVydCgiRXJybzog5pyq5om+5Yiw5Lu75L2V6ZO+5o6lIikKICAgICAgICByZXR1cm4gLTE7CiAgICB9CiAgICB2YXIgd2VpYm9fc3RyID0gIjEwMDEwM3R5cGUiOyAvL3dlaWJvCiAgICB2YXIgYmFpZHVfc3RyID0gImJhaWR1LmNvbSI7CiAgICB2YXIgZW5jb2RlX3JveSA9ICIlRTclOEUlOEIlRTYlQkElOTAiOwogICAgdmFyIHFxbXVzaWNfc3RyID0gImh0dHBzOi8vaS55LnFxLmNvbSI7CiAgICB2YXIgdHRhcnRpY2xlX3N0ciA9ICJodHRwczovL2NhcmQud2VpYm8uY29tL2FydGljbGUiOyAvL+WktOadoeaWh+eroAogICAgZm9yKHZhciBzaSA9MDsgc2k8bGlua19sZW5ndGg7IHNpKyspewogICAgICAgIHZhciBhX2NvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd3ZWliby10ZXh0JylbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVtzaV07CiAgICAgICAgLy93ZWlibyAgICAgICAKICAgICAgICBpZihhX2NvbnRlbnQuaHJlZi5pbmRleE9mKHdlaWJvX3N0cikgIT09IC0xKXsKICAgICAgICAgICAgbGlua19hcnJ5W2VmZmVjdGl2ZV9saW5rc19udW1dID0gYV9jb250ZW50LmhyZWY7CiAgICAgICAgICAgIGVmZmVjdGl2ZV9saW5rc19udW0gKz0gMTsKICAgICAgICB9CiAgICAgICAgLy9iYWlkdQogICAgICAgIGVsc2UgaWYoYV9jb250ZW50LmhyZWYuaW5kZXhPZihiYWlkdV9zdHIpICE9PSAtMSAmJiBhX2NvbnRlbnQuaHJlZi5pbmRleE9mKGVuY29kZV9yb3kpICE9PSAtMSl7CiAgICAgICAgICAgIC8vY29uc3RydW5jdCB3d3cuYmFpZHUuY29tL3MvIGxpbmtzCiAgICAgICAgICAgIGlmKGFfY29udGVudC5ocmVmLmluZGV4T2YoIm0uYmFpZHUuY29tIikgIT0gLTEpewogICAgICAgICAgICAgICAgdmFyIHdvcmRfdmFsdWUgPSBnZXRTcGxpdFZhbHVlKGFfY29udGVudC5ocmVmLCJ3b3JkIikKICAgICAgICAgICAgICAgIC8vdmFyIGtleXdvcmRzID0gYV9jb250ZW50LmhyZWYuc3BsaXQoIj8iKVsxXS5zcGxpdCgiJiIpWzBdLnNwbGl0KCJ3b3JkPSIpWzFdCiAgICAgICAgICAgICAgICBpZih3b3JkX3ZhbHVlICE9PSAiIil7CiAgICAgICAgICAgICAgICAgICAgbGlua19hcnJ5W2VmZmVjdGl2ZV9saW5rc19udW1dID0gImh0dHBzOi8vd3d3LmJhaWR1LmNvbS9zP2llPXV0Zi04JmY9OCZyc3ZfYnA9MSZyc3ZfaWR4PTEmdG49YmFpZHUmd2Q9Iit3b3JkX3ZhbHVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICBsaW5rX2FycnlbZWZmZWN0aXZlX2xpbmtzX251bV0gPSBhX2NvbnRlbnQuaHJlZjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKGxpbmtfYXJyeVtlZmZlY3RpdmVfbGlua3NfbnVtXSk7CiAgICAgICAgICAgIGVmZmVjdGl2ZV9saW5rc19udW0gKz0gMTsKICAgICAgICB9CiAgICAgICAgLy9xcSBtdXNpYyAgICAgCiAgICAgICAgZWxzZSBpZihhX2NvbnRlbnQuaHJlZi5pbmRleE9mKHFxbXVzaWNfc3RyKSAhPT0gLTEpewogICAgICAgICAgICB2YXIgcmVhbF9tdXNpY191cmwgPSAiIjsKICAgICAgICAgICAgdmFyIHNvbmdpZCA9IGdldFNwbGl0VmFsdWUoYV9jb250ZW50LmhyZWYsInNvbmdpZCIpOwogICAgICAgICAgICB2YXIgc29uZ21pZCA9IGdldFNwbGl0VmFsdWUoYV9jb250ZW50LmhyZWYsInNvbmdtaWQiKTsKICAgICAgICAgICAgLyoKICAgICAgICAgICAgdmFyIHNvbmdpZCA9ICIiOwogICAgICAgICAgICB2YXIgc29uZ21pZCA9ICIiOwogICAgICAgICAgICAvL2dldCBzb25nbWlkIGFuZCBzb25naWQgdmFsdWUKICAgICAgICAgICAgdmFyIGF0dHJOdW0gPSBhX2NvbnRlbnQuaHJlZi5zcGxpdCgiPyIpWzFdLnNwbGl0KCImIikubGVuZ3RoOwogICAgICAgICAgICBmb3IodmFyIHFpID0gMDsgcWkgPCBhdHRyTnVtOyBxaSsrKXsKICAgICAgICAgICAgICAgIGlmIChhX2NvbnRlbnQuaHJlZi5zcGxpdCgiPyIpWzFdLnNwbGl0KCImIilbcWldLmluZGV4T2YoInNvbmdpZCIpIT0tMSl7CiAgICAgICAgICAgICAgICAgICAgc29uZ2lkID0gYV9jb250ZW50LmhyZWYuc3BsaXQoIj8iKVsxXS5zcGxpdCgiJiIpW3FpXS5zcGxpdCgic29uZ2lkPSIpWzFdOwogICAgICAgICAgICAgICAgICAgIGlmKHNvbmdpZCAhPT0gIiIpewogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9ICAgIAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFfY29udGVudC5ocmVmLnNwbGl0KCI\/IilbMV0uc3BsaXQoIiYiKVtxaV0uaW5kZXhPZigic29uZ21pZCIpIT0tMSl7CiAgICAgICAgICAgICAgICAgICAgc29uZ21pZCA9IGFfY29udGVudC5ocmVmLnNwbGl0KCI\/IilbMV0uc3BsaXQoIiYiKVtxaV0uc3BsaXQoInNvbmdtaWQ9IilbMV07CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKi8KICAgICAgICAgICAgLy9zb25naWQKICAgICAgICAgICAgaWYoc29uZ2lkICE9PSAiIil7CiAgICAgICAgICAgICAgICByZWFsX211c2ljX3VybCA9ICJodHRwczovL3kucXEuY29tL24veXFxL3NvbmcvIiArIHNvbmdpZCArICJfbnVtLmh0bWw\/QURUQUc9aDVfcGxheXNvbmcmbm9fcmVkaXJlY3Q9MSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZihzb25nbWlkICE9PSAiIil7CiAgICAgICAgICAgICAgICByZWFsX211c2ljX3VybCA9ICJodHRwczovL3kucXEuY29tL24veXFxL3NvbmcvIiArIHNvbmdtaWQgKyAiLmh0bWw\/QURUQUc9aDVfcGxheXNvbmcmbm9fcmVkaXJlY3Q9MSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJ1bmFibGUgdG8gcmVjb25naXplIHRoZSBtdXNpYyB1cmwiKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGxpbmtfYXJyeVtlZmZlY3RpdmVfbGlua3NfbnVtXSA9IHJlYWxfbXVzaWNfdXJsOwogICAgICAgICAgICBlZmZlY3RpdmVfbGlua3NfbnVtICs9IDE7CiAgICAgICAgfQogICAgICAgIC8vdG91dGlhbyBhcnRpY2xlCiAgICAgICAgCiAgICAgICAgZWxzZSBpZihhX2NvbnRlbnQuaHJlZi5pbmRleE9mKHR0YXJ0aWNsZV9zdHIpICE9PSAtMSl7CiAgICAgICAgICAgIGxpbmtfYXJyeVtlZmZlY3RpdmVfbGlua3NfbnVtXSA9IGFfY29udGVudC5ocmVmOwogICAgICAgICAgICBlZmZlY3RpdmVfbGlua3NfbnVtICs9IDE7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLpnZ7lh4DljJbpk77mjqXmiJbmnKrog73or4bliKvnmoTmkJzntKLnsbvlnos6ICIgKyBhX2NvbnRlbnQuaHJlZikKICAgICAgICB9ICAgICAgCiAgICB9Cn0KCi8vb3BlbiBvbmUgc2VhcmNoIGZvciBiYWlkdQpmdW5jdGlvbiBiYWlkdVBhZ2UoKXsKICAgIHVybF8xID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgicmVzdWx0LW9wIGMtY29udGFpbmVyIHhwYXRoLWxvZyIpWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmhyZWY7CiAgICBsb2NhdGlvbi5ocmVmID0gdXJsXzE7Cn0KCi8vZ2V0IHZhbHVlIG9mIGtleXdvcmQgZnJvbSB1cmwKZnVuY3Rpb24gZ2V0U3BsaXRWYWx1ZSh1cmxTdHIsa2V5V29yZCl7CiAgICB2YXIgdmFsdWUgPSAiIjsKICAgIHZhciBhdHRyTnVtID0gdXJsU3RyLnNwbGl0KCI\/IilbMV0uc3BsaXQoIiYiKS5sZW5ndGg7CiAgICAgICAgZm9yKHZhciBxaSA9IDA7IHFpIDwgYXR0ck51bTsgcWkrKyl7CiAgICAgICAgICAgIGlmICh1cmxTdHIuc3BsaXQoIj8iKVsxXS5zcGxpdCgiJiIpW3FpXS5pbmRleE9mKGtleVdvcmQpIT0tMSl7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVybFN0ci5zcGxpdCgiPyIpWzFdLnNwbGl0KCImIilbcWldLnNwbGl0KGtleVdvcmQrIj0iKVsxXTsKICAgICAgICAgICAgICAgIGJyZWFrOyAgIAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgcmV0dXJuIHZhbHVlOwp9CgovLz09PT09PT09PT09PT09PXNvbWUgYmFzaWMgZnVuY3Rpb249PT09PT09PT09PT09CgovLz09PT09PT09PT1mb3IgcmVwb3J0CmZ1bmN0aW9uIGFkZEJ1dHRvbigpewogICAgdmFyIG5ld0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogICAgbmV3QnRuLnNldEF0dHJpYnV0ZSgiY2xhc3MiLCJidXR0b24iKTsKICAgIHZhciBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIG5ld0Rpdi5pZCA9ICJKTmV3RGl2UmVwb3J0IjsKICAgIG5ld0Rpdi5zdHlsZSA9ICJmbG9hdDpyaWdodCI7CiAgICBuZXdCdG4udGV4dENvbnRlbnQgPSAi5LiA6ZSu5Y+N6buRIjsKICAgIG5ld0J0bi5uYW1lPSJ0ZW1wIGJ0biBiYSI7CiAgICBuZXdEaXYuYXBwZW5kKG5ld0J0bik7CgogICAgdmFyIGN1cnJlbnRINCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIndlaWJvLXRvcCBtLWJveCIpWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoNCIpWzBdOwogICAgY3VycmVudEg0LmFwcGVuZChuZXdEaXYpOwoKICAgIC8vYWRkIGV2ZW50CiAgICBjdXJyZW50SDQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYnV0dG9uIilbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpewogICAgICAgIC8vY2hlY2sgaWYgMXN0IHJ1bm5pbmcKICAgICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjYXJkLXdyYXAiKVswXS5jaGlsZEVsZW1lbnRDb3VudCA9PSAyICYmZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY2FyZC13cmFwIilbMF0uY2hpbGRyZW5bMV0uaWQ9PSJKTmV3RGl2SW5mbyIpewogICAgICAgICAgICAvL3JlbW92ZSBidXR0b24sIGV4aXQKICAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ3ZWliby10b3AgbS1ib3giKVswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaDQiKVswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2IilbMF07CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIndlaWJvLXRvcCBtLWJveCIpWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoNCIpWzBdLnJlbW92ZUNoaWxkKGIpOwogICAgICAgICAgICAvL3ZhciB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY2FyZC13cmFwIilbMF0uY2hpbGRyZW5bMV07CiAgICAgICAgICAgIC8vZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY2FyZC13cmFwIilbMF0ucmVtb3ZlQ2hpbGQodCk7CiAgICAgICAgICAgIGFsZXJ0KCLmgqjlt7LlrozmiJDkuL7miqUhIik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICBzdGFydFdlaWJvKCk7CgogICAgICAgIH0sMTAwKTsKICAgIH0pOwp9CgpmdW5jdGlvbiBhZGREaXZJdGVtSW5mbygpewogICAgdmFyIG5ld0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgLy9uZWVkIHRvIGZpbmQgdGhlIGNvcnJldCBmb3Igd2VpYm8KICAgIHZhciBjdXJyZW50Q2xhc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjYXJkLXdyYXAiKVswXTsKICAgIGN1cnJlbnRDbGFzcy5hcHBlbmQobmV3RGl2KTsKCiAgICBuZXdEaXYuaWQgPSAiSk5ld0RpdkluZm8iOwogICAgLy9uZXdEaXYuc2V0QXR0cmlidXRlKCdjb29yZHMnLCIwLDAsMjcwLDEyOSIpCiAgICBuZXdEaXYuc3R5bGUuYm9yZGVyID0gJ25vbmUnOwogICAgbmV3RGl2LnN0eWxlLmNvbG9yID0gInJlZCI7CiAgICBuZXdEaXYuc3R5bGUud2lkdGggPSAiOTUlIjsKICAgIC8vbmV3RGl2LnN0eWxlLmJhY2tncm91bmQgPSAiI2ZmZiI7CiAgICAvL25ld0Rpdi5zdHlsZS5ib3JkZXIgPSAiMXB4IHNvbGlkICMwMDAiOwogICAgbmV3RGl2LnN0eWxlLmZvbnRTaXplID0gIjEycHgiCiAgICBuZXdEaXYuc3R5bGUudGV4dEFsaWduID0gImxlZnQiOwogICAgLy9uZXdEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnOwogICAgLy9uZXdEaXYuc3R5bGUucG9zaXRpb24gPSAnc3RhdGljJzsKCiAgICB2YXIgbmV3Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCLmrKLov47kvb\/nlKguLi4iKTsKICAgIG5ld0Rpdi5hcHBlbmRDaGlsZChuZXdDb250ZW50KTsKfQoKZnVuY3Rpb24gYXBwZW5kSXRlbUNvbmVudChjb250ZW50KXsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdKTmV3RGl2SW5mbycpLmlubmVySFRNTCArPSAoIjxicj4iICsgY29udGVudCk7Cn0KCi8vPT09PT09PT09PWZvciBhdXRvIGNsZWFuCmZ1bmN0aW9uIGFkZENsZWFuQnV0dG9uKCl7CiAgICB2YXIgbmV3QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CiAgICBuZXdCdG4uc2V0QXR0cmlidXRlKCJjbGFzcyIsImJ1dHRvbiIpOwogICAgdmFyIG5ld0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgbmV3RGl2LnN0eWxlID0gImZsb2F0OnJpZ2h0IjsKICAgIG5ld0J0bi50ZXh0Q29udGVudCA9ICLkuIDplK7lh4DljJYiOwogICAgbmV3QnRuLm5hbWU9InRlbXAgYnRuIGJhIjsKICAgIG5ld0Rpdi5hcHBlbmQobmV3QnRuKTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIndlaWJvLXRvcCBtLWJveCIpWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoNCIpWzBdLmFwcGVuZChuZXdEaXYpOwoKICAgIC8vYWRkIGV2ZW50CiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ3ZWliby10b3AgbS1ib3giKVswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaDQiKVswXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJidXR0b24iKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7CiAgICAgICAgLy9jaGVjayBpZiAxc3QgcnVubmluZwogICAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNhcmQtd3JhcCIpWzBdLmNoaWxkRWxlbWVudENvdW50ID09IDIpewogICAgICAgICAgICB2YXIgdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNhcmQtd3JhcCIpWzBdLmNoaWxkcmVuWzFdOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjYXJkLXdyYXAiKVswXS5yZW1vdmVDaGlsZCh0KTsKICAgICAgICAgICAgLy9jbGVhcgogICAgICAgICAgICBlZmZlY3RpdmVfbGlua3NfbnVtID0gMDsKICAgICAgICB9CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICBzdGFydCgpOwoKICAgICAgICB9LDEwMCk7CgogICAgfSk7CgogICAgcmV0dXJuIDA7Cgp9CgpmdW5jdGlvbiBhZGREaXZJdGVtSW5mb1JpZ2h0KCl7CiAgICB2YXIgbmV3RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAvL25lZWQgdG8gZmluZCB0aGUgY29ycmV0IGZvciB3ZWlibwogICAgdmFyIGN1cnJlbnRDbGFzcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNhcmQtd3JhcCIpWzBdOwogICAgY3VycmVudENsYXNzLmFwcGVuZChuZXdEaXYpOwoKICAgIG5ld0Rpdi5pZCA9ICJKTmV3RGl2SW5mbyI7CiAgICAvL25ld0Rpdi5zZXRBdHRyaWJ1dGUoJ2Nvb3JkcycsIjAsMCwyNzAsMTI5IikKICAgIG5ld0Rpdi5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7CiAgICBuZXdEaXYuc3R5bGUuY29sb3IgPSAicmVkIjsKICAgIG5ld0Rpdi5zdHlsZS53aWR0aCA9ICI5NSUiOwogICAgLy9uZXdEaXYuc3R5bGUuYmFja2dyb3VuZCA9ICIjZmZmIjsKICAgIC8vbmV3RGl2LnN0eWxlLmJvcmRlciA9ICIxcHggc29saWQgIzAwMCI7CiAgICBuZXdEaXYuc3R5bGUuZm9udFNpemUgPSAiMThweCIKICAgIG5ld0Rpdi5zdHlsZS50ZXh0QWxpZ24gPSAicmlnaHQiOwogICAgLy9uZXdEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnOwogICAgLy9uZXdEaXYuc3R5bGUucG9zaXRpb24gPSAnc3RhdGljJzsKCiAgICB2YXIgbmV3Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCLmrKLov47kvb\/nlKguLi4iKTsKICAgIG5ld0Rpdi5hcHBlbmRDaGlsZChuZXdDb250ZW50KTsKfQoKZnVuY3Rpb24gbW9kaWZ5SXRlbUNvbmVudChjb250ZW50KXsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdKTmV3RGl2SW5mbycpLnRleHRDb250ZW50ID0gY29udGVudDsKfQoKCgoKCiAKCgp9KSgpOw==",
  "regex" : "*",
  "runat" : 0,
  "name" : "OneKeyCleanComplain",
  "version" : "1.0"
}